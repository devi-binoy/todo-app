{"ast":null,"code":"import _toConsumableArray from\"/Users/debi/Desktop/todo-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/debi/Desktop/todo-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import TodoForm from'./TodoForm';import Todo from'./Todo';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function TodoList(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),todos=_useState2[0],setTodos=_useState2[1];var addTodo=function addTodo(todo){if(!todo.text||/^\\s*$/.test(todo.text)){return;}var newTask=[todo].concat(_toConsumableArray(todos));setTodos(newTask);};var updateTodo=function updateTodo(todoId,newValue){if(!newValue.text||/^\\s*$/.test(newValue.text)){return;}setTodos(function(prev){return prev.map(function(item){return item.id===todoId?newValue:item;});});};var removeTodo=function removeTodo(id){var removedArr=_toConsumableArray(todos).filter(function(todo){return todo.id!==id;});setTodos(removedArr);};var completeTodo=function completeTodo(id){var updatedTodos=todos.map(function(todo){if(todo.id===id){todo.isComplete=!todo.isComplete;}return todo;});setTodos(updatedTodos);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"To-Do\"}),/*#__PURE__*/_jsx(TodoForm,{onSubmit:addTodo}),/*#__PURE__*/_jsx(Todo,{todos:todos,completeTodo:completeTodo,removeTodo:removeTodo,updateTodo:updateTodo})]});}export default TodoList;","map":{"version":3,"sources":["/Users/debi/Desktop/todo-app/src/TodoList.js"],"names":["React","useState","TodoForm","Todo","TodoList","todos","setTodos","addTodo","todo","text","test","newTask","updateTodo","todoId","newValue","prev","map","item","id","removeTodo","removedArr","filter","completeTodo","updatedTodos","isComplete"],"mappings":"4OAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,C,6IAEA,QAASC,CAAAA,QAAT,EAAoB,CAElB,cAA0BH,QAAQ,CAAC,EAAD,CAAlC,wCAAOI,KAAP,eAAcC,QAAd,eAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAAC,IAAI,CAAI,CACtB,GAAI,CAACA,IAAI,CAACC,IAAN,EAAc,QAAQC,IAAR,CAAaF,IAAI,CAACC,IAAlB,CAAlB,CAA2C,CACzC,OACD,CAED,GAAME,CAAAA,OAAO,EAAIH,IAAJ,4BAAaH,KAAb,EAAb,CAEAC,QAAQ,CAACK,OAAD,CAAR,CACD,CARD,CAWA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,MAAD,CAASC,QAAT,CAAsB,CACvC,GAAI,CAACA,QAAQ,CAACL,IAAV,EAAkB,QAAQC,IAAR,CAAaI,QAAQ,CAACL,IAAtB,CAAtB,CAAmD,CACjD,OACD,CAEDH,QAAQ,CAAC,SAAAS,IAAI,QAAIA,CAAAA,IAAI,CAACC,GAAL,CAAS,SAAAC,IAAI,QAAKA,CAAAA,IAAI,CAACC,EAAL,GAAYL,MAAZ,CAAqBC,QAArB,CAAgCG,IAArC,EAAb,CAAJ,EAAL,CAAR,CACD,CAND,CASA,GAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAAD,EAAE,CAAI,CACvB,GAAME,CAAAA,UAAU,CAAG,mBAAIf,KAAJ,EAAWgB,MAAX,CAAkB,SAAAb,IAAI,QAAIA,CAAAA,IAAI,CAACU,EAAL,GAAYA,EAAhB,EAAtB,CAAnB,CAEAZ,QAAQ,CAACc,UAAD,CAAR,CACD,CAJD,CAMA,GAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAJ,EAAE,CAAI,CACzB,GAAIK,CAAAA,YAAY,CAAGlB,KAAK,CAACW,GAAN,CAAU,SAAAR,IAAI,CAAI,CAAC,GAAIA,IAAI,CAACU,EAAL,GAAYA,EAAhB,CAAoB,CAAEV,IAAI,CAACgB,UAAL,CAAkB,CAAChB,IAAI,CAACgB,UAAxB,CAAqC,CAC/F,MAAOhB,CAAAA,IAAP,CACD,CAFkB,CAAnB,CAGAF,QAAQ,CAACiB,YAAD,CAAR,CACD,CALD,CAOA,mBACE,wCACE,6BADF,cAEE,KAAC,QAAD,EAAU,QAAQ,CAAEhB,OAApB,EAFF,cAGE,KAAC,IAAD,EACE,KAAK,CAAEF,KADT,CAEE,YAAY,CAAEiB,YAFhB,CAGE,UAAU,CAAEH,UAHd,CAIE,UAAU,CAAEP,UAJd,EAHF,GADF,CAYD,CAED,cAAeR,CAAAA,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\n\nfunction TodoList() {\n\n  const [todos, setTodos] = useState([]);\n\n  const addTodo = todo => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n\n    const newTask = [todo, ...todos];\n\n    setTodos(newTask);\n  };\n\n\n  const updateTodo = (todoId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n  };\n\n\n  const removeTodo = id => {\n    const removedArr = [...todos].filter(todo => todo.id !== id);\n\n    setTodos(removedArr);\n  };\n\n  const completeTodo = id => {\n    let updatedTodos = todos.map(todo => {if (todo.id === id) { todo.isComplete = !todo.isComplete; }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  return (\n    <>\n      <h1>To-Do</h1>\n      <TodoForm onSubmit={addTodo} />\n      <Todo\n        todos={todos}\n        completeTodo={completeTodo}\n        removeTodo={removeTodo}\n        updateTodo={updateTodo}\n      />\n    </>\n  );\n}\n\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}